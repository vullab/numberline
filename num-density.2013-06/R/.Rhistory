panel.grid = element_line(color = "gray"),
axis.line = element_line(color = "black"),
# positioning
legend.position = "bottom"
) +
facet_grid(vary~as.numeric(block), scales = "free")
dat.subject %>%
ggplot(aes(x = num_dots, y = answer)) +
geom_point(alpha = 0.5, size = 1.5, color = "blue") +
geom_line(data = df.slopes, aes(x = num_dots, y = pred), color = "red", size = 0.8) +
mylogx(c(1, MAX_PRESENTED)) +
mylogy(c(1, MAX_ESTIMATE)) +
xlab("Number presented") +
ylab("Number reported") +
ggtitle("Sample slope estimates across blocks and modalities") +
#individ_plot_theme +
theme(
# titles
plot.title = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 14),
axis.title.x = element_text(face = "bold", size = 14),
# axis text
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 90, hjust = 0, vjust = 0),
# facet text
strip.text = element_text(face = "bold", size = 12),
# backgrounds, lines
panel.background = element_blank(),
panel.grid = element_line(color = "gray"),
axis.line = element_line(color = "black"),
# positioning
legend.position = "bottom"
) +
facet_grid(as.numeric(block)~vary, scales = "free")
dat.subject %>%
ggplot(aes(x = num_dots, y = answer)) +
geom_point(alpha = 0.5, size = 1.5, color = "blue") +
geom_line(data = df.slopes, aes(x = num_dots, y = pred), color = "red", size = 0.8) +
mylogx(c(1, MAX_PRESENTED)) +
mylogy(c(1, MAX_ESTIMATE)) +
xlab("Number presented") +
ylab("Number reported") +
ggtitle("Sample slope estimates by block, modality") +
#individ_plot_theme +
theme(
# titles
plot.title = element_text(face = "bold", size = 20),
axis.title.y = element_text(face = "bold", size = 14),
axis.title.x = element_text(face = "bold", size = 14),
# axis text
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 90, hjust = 0, vjust = 0),
# facet text
strip.text = element_text(face = "bold", size = 12),
# backgrounds, lines
panel.background = element_blank(),
panel.grid = element_line(color = "gray"),
axis.line = element_line(color = "black"),
# positioning
legend.position = "bottom"
) +
facet_grid(as.numeric(block)~vary, scales = "free")
### FIGURE: INDIVIDUAL EXAMPLE SLOPES BY TRIAL MODALITY (ALL BLOCKS) ###
subjects = c(2, 31, 47)
subjectsDat = dat %>%
filter(subject %in% subjects,
as.numeric(block) %in% 2:11)
fitsModalitySubj = list()
for (i in 1:length(MODALITIES)) {
A = (subjectsDat$vary == MODALITIES[i])
tmp = subset(subjectsDat, A)
fitsModalitySubj[[MODALITIES[i]]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
print(c(i, sum(fitsModalitySubj[[MODALITIES[i]]]$logL == -9999)))
}
predictions = data.frame('subject' = character(),
'vary' = character(),
'num_dots' = numeric(),
'prediction' = numeric())
for (i in 1:length(MODALITIES)) {
for (j in 1:length(subjects)) {
true_vals = 1:MAX_PRESENTED
predictions = rbind(predictions,
data.frame(subject = subjects[j],
vary = MODALITIES[i],
num_dots = true_vals,
prediction = map.bipower(true_vals, fitsModalitySubj[[i]]$a[j], fitsModalitySubj[[i]]$b[j])))
#prediction.ul = map.bipower(true_vals, fitsModality[[i]]$a, 10^fitsModality[[i]]$b + 10^fitsModality[[i]]$s),
#prediction.ll = map.bipower(true_vals, fitsModality[[i]]$a, 10^fitsModality[[i]]$b - 10^fitsModality[[i]]$s)))
}
}
ggplot(subjectsDat, aes(x = num_dots, y = answer)) +
geom_point(color = "blue", size = 2, alpha = 0.25) +
geom_point(data = predictions, aes(x = num_dots, y = prediction), color = "red", size = .8) +
geom_line(data = predictions, aes(x = num_dots, y = prediction), color = "red", size = 2) +
#geom_ribbon(data = predictions, mapping = aes(x = num_dots, ymin = prediction.ll, ymax = prediction.ul), inherit.aes = FALSE, alpha = 0.5) +
geom_abline(position = "identity") +
mylogx(c(1, MAX_PRESENTED)) +
mylogy(c(1, MAX_ESTIMATE)) +
xlab("Number presented") +
ylab("Number reported") +
ggtitle("Fitted slopes for sample participants") +
individ_plot_theme +
facet_grid(subject~vary, scales = "free")
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11)
table(individ.dat$block)
glimpse(individ.dat)
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(rows = n())
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(rows = n())
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(len = n())
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(length = n)
individ.dat
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(len = n())
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(n())
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(nrows())
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
tally()
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
#tally()
summarize(len = length(.))
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
#tally()
summarize(len = dim(.))
158/2
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(len = count(unique(trial)))
dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
summarize(len = count(trial))
158 % 2 == 0
158 %% 2 == 0
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = trial %% 2 == 0) # this is just a stand-in, we shuffle these later
glimpse(individ.dat)
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) # this is just a stand-in, we shuffle these later
glimpse(individ.dat)
install.packages("devtoools")
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
recode(split.half, sample(split.half, length(split.half), replace = F))
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
recode(split.half, with(., sample(split.half, length(split.half), replace = F)))
sample.fn = function(vals) {
with(vals, sample(vals, length(vals), replace = F))
}
individ.dat$split.half
individ.dat$split.half[1:10]
foo = sample.fn(individ.dat$split.half[1:10])
length(individ.dat$split.half[1:10])
vals = individ.dat$split.half[1:10]
vals
foo = with(vals, sample(vals, length(vals), replace = F))
foo = sample(vals, length(vals), replace = F)
foo
sample.fn = function(vals) {
sample(vals, length(vals), replace = F)
}
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
recode(split.half, sample.fn(split.half))
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
mutate(split.half = replace(sample.fn(split.half)))
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
mutate(split.half = replace(split.half, sample.fn(split.half)))
?replace
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
mutate(split.half = replace(split.half, values = sample.fn(split.half)))
glimpse(individ.dat)
glimpse(individ.dat[subject == 1 & vary == 'area',])
glimpse(individ.dat[individ.dat$subject == 1 & individ.dat$vary == 'area',])
individ.dat %>%
order_by(subject, vary, trial) %>%
glimpse(.)
individ.dat %>%
order_by(subject, vary, trial) %>%
glimpse()
individ.dat %>%
group_by(subject, vary, trial) %>%
glimpse()
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) #%>% # this is just a stand-in, we shuffle these later
individ.dat %>%
group_by(subject, vary, trial) %>%
glimpse()
individ.dat = dat %>%
filter(as.numeric(block) %in% 2:11) %>% # blocks 1-10
group_by(subject, vary) %>%
mutate(split.half = as.numeric(trial %% 2 == 0)) %>% # this is just a stand-in, we shuffle these later
mutate(split.half = replace(split.half, values = sample.fn(split.half)))
individ.dat %>%
group_by(subject, vary, trial) %>%
glimpse()
A = (individ.dat$vary == MODALITIES[i] & split.half == 0)
fitsModalitySplit = list()
for (i in 1:length(MODALITIES)) {
fitsModalitySplit[[MODALITIES[i]]] = list()
A = (individ.dat$vary == MODALITIES[i] & individ.dat$split.half == 0)
tmp = subset(individ.dat, A)
fitsModalitySplit[[MODALITIES[i]]][['0']] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
print(c(i, sum(fitsModalitySplit[[MODALITIES[i]]][['0']]$logL == -9999)))
# A = (individ.dat$vary == MODALITIES[i] & individ.dat$split.half == 1)
# tmp = subset(individ.dat, A)
# fitsModalitySplit[[MODALITIES[i]]][['1']] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
# print(c(i, sum(fitsModalitySplit[[MODALITIES[i]]][['1']]$logL == -9999)))
}
fitsModalitySplit
fitsModalitySplit = list()
for (i in 1:length(MODALITIES)) {
fitsModalitySplit[[MODALITIES[i]]] = list()
A = (individ.dat$vary == MODALITIES[i] & individ.dat$split.half == 0)
tmp = subset(individ.dat, A)
fitsModalitySplit[[MODALITIES[i]]][['0']] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
print(c(i, sum(fitsModalitySplit[[MODALITIES[i]]][['0']]$logL == -9999)))
A = (individ.dat$vary == MODALITIES[i] & individ.dat$split.half == 1)
tmp = subset(individ.dat, A)
fitsModalitySplit[[MODALITIES[i]]][['1']] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
print(c(i, sum(fitsModalitySplit[[MODALITIES[i]]][['1']]$logL == -9999)))
}
fitsModalitySplit
for (i in 1:length(MODALITIES)) {
for (j in 1:length(MODALITIES)) {
s1 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[i]]], namedSlopes))
s2 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[j]]], namedSlopes))
}
}
s1
i
j
MODALITIES[[i]]
fitsModalitySplit[["area"]]
cor.test(s1, s2)
s1
names(s1) = c("half0", "half1")
s1
cor.test(s1$half0, s1$half1)
cor.test(s2$half0, s2$half1)
names(s2) = c("half0", "half1")
cor.test(s2$half0, s2$half1)
foo = cor.test(s2$half0, s2$half1)
foo$statistic
foo$estimate
foo$conf.int
foo$conf.int[1]
foo$conf.int[2]
mconf = data.frame("Comparison" = character(), "corr" = numeric(), "Lower.conf" = numeric(), "Upper.conf" = numeric())
for (i in 1:length(MODALITIES)) {
for (j in 1:length(MODALITIES)) {
s1.label = MODALITIES[i]
s2.label = MODALITIES[j]
# outputs df of slopes for 0 pairwise, 1 pairwise for each participant in that modality
s1 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[i]]], namedSlopes))
s2 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[j]]], namedSlopes))
names(s1) = c("half0", "half1")
names(s2) = c("half0", "half1")
if (i == j) { # when i == j, s1 and s2 are identical
cortest = cor.test(s1$half0, s1$half1)
} else {
cortest = cor.test(s1$half0, s2$half0) # choice of half in s1 and s2 is arbitrary
}
mconf = rbind(mconf, data.frame(Comparison = paste(s1.label, s2.label, sep = "-"),
corr = cortest$estimate,
Lower.conf = cortest$conf.int[1],
Upper.conf = cortest$conf.int[2]))
}
}
mconf
mconf = data.frame("Comparison" = character(), "corr" = numeric(), "Lower.conf" = numeric(), "Upper.conf" = numeric())
for (i in 1:length(MODALITIES)) {
for (j in i:length(MODALITIES)) {
s1.label = MODALITIES[i]
s2.label = MODALITIES[j]
# outputs df of slopes for 0 pairwise, 1 pairwise for each participant in that modality
s1 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[i]]], namedSlopes))
s2 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[j]]], namedSlopes))
names(s1) = c("half0", "half1")
names(s2) = c("half0", "half1")
if (i == j) { # when i == j, s1 and s2 are identical
cortest = cor.test(s1$half0, s1$half1)
} else {
cortest = cor.test(s1$half0, s2$half0) # choice of half in s1 and s2 is arbitrary
}
mconf = rbind(mconf, data.frame(Comparison = paste(s1.label, s2.label, sep = "-"),
corr = cortest$estimate,
Lower.conf = cortest$conf.int[1],
Upper.conf = cortest$conf.int[2]))
}
}
mconf
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_point()
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_point() +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf))
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_point() +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
individ_plot_theme
mconf %>%
ggplot(aes(color = Comparison, y = corr)) +
geom_point() +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Correlation of ") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_point() +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Correlation of ") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_bar() +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Correlation of ") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Correlation of ") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf)) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr)) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
individ_plot_theme
mconf = data.frame("Comparison" = character(), "corr" = numeric(), "Lower.conf" = numeric(), "Upper.conf" = numeric(), "Within" = numeric())
for (i in 1:length(MODALITIES)) {
for (j in i:length(MODALITIES)) {
s1.label = MODALITIES[i]
s2.label = MODALITIES[j]
# outputs df of slopes for 0 pairwise, 1 pairwise for each participant in that modality
s1 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[i]]], namedSlopes))
s2 = do.call(cbind.fill, lapply(fitsModalitySplit[[MODALITIES[j]]], namedSlopes))
names(s1) = c("half0", "half1")
names(s2) = c("half0", "half1")
if (i == j) { # when i == j, s1 and s2 are identical
cortest = cor.test(s1$half0, s1$half1)
} else {
cortest = cor.test(s1$half0, s2$half0) # choice of half in s1 and s2 is arbitrary
}
mconf = rbind(mconf, data.frame(Comparison = paste(s1.label, s2.label, sep = "-"),
corr = cortest$estimate,
Lower.conf = cortest$conf.int[1],
Upper.conf = cortest$conf.int[2],
Within = as.numeric(i == j)))
}
}
mconf
mconf %>%
ggplot(aes(x = Comparison, y = corr, color = Within)) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr, color = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr, color = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_color_manual(name = "",
values = c("0" = "red", "1" = "blue"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr, fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = "red", "1" = "blue"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr, fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = rgb(1.0, 0, 0), "1" = rgb(0, 0.7, 0)),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
mconf %>%
ggplot(aes(x = Comparison, y = corr, fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = "#999999", "1" = "#56B4E9"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
?reorder
mconf %>%
ggplot(aes(x = fct_reorder(Comparison, corr, fun = median, .desc =TRUE), y = corr, fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = "#999999", "1" = "#56B4E9"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
mconf %>%
ggplot(aes(x = fct_reorder(Comparison, corr, .desc =TRUE), y = corr, fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = "#999999", "1" = "#56B4E9"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
individ_plot_theme
mconf %>%
ggplot(aes(x = fct_reorder(Comparison, corr, .desc = TRUE),
y = corr,
fill = as.factor(Within))) +
geom_bar(stat = "identity", width = 0.5) +
geom_errorbar(aes(ymin = Lower.conf, ymax = Upper.conf), width = 0.25) +
ggtitle("Split half slope correlations") +
labs(x = "Modality comparison", y = "Correlation") +
scale_fill_manual(name = "",
values = c("0" = "#999999", "1" = "#56B4E9"),
labels = c("0" = "Across-modality", "1" = "Within-modality")) +
ylim(0, 1) +
individ_plot_theme
mconf
0.8713891 - 0.7862914
0.9240423 - 0.8713891
