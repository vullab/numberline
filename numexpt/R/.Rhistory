print(c(i, k, sum(fitsMod[[MODALITIES[i]]][[k + 1]]$logL == -9999),
sum(fitsBlock[[MODALITIES[i]]][[k + 1]]$logL == -9999)))
}
}
# Validating the fits above
fitsBlock[["size"]][[13]] # best fitting slopes by subject for block 13 of "size" trials
# fit power function
brutefit = function(tmp){
nLL = function(a, b, s){
-loglik(tmp$num_dots, tmp$answer, map.bipower, a, b, 10^s) + # NB: can use other function instead of `map.bipower`
PRIORS[[1]](a) +
PRIORS[[2]](b) +
PRIORS[[3]](s)
}
iter = 0
fits = NULL
fit = NULL
while (is.null(fits)){
try(fit <- summary(mle(nLL,
start = list(a = runif(1, PARAMS["ma"], PARAMS["sa"]),
b = runif(1, PARAMS["mb"], PARAMS["sb"]),
s = rnorm(1, PARAMS["ms"], PARAMS["ss"])))), TRUE)
iter = iter + 1
if (!is.null(fit)) {
fits = c(tmp$subject[1], -0.5 * fit@m2logL, length(tmp$num_dots), fit@coef[,"Estimate"])
} else {
# if (iter > 50) { # NB increase this for larger data than individual participants/blocks
if (iter > 5000) {
#print("Unable to fit slope")
fits = c(tmp$subject[1], -9999, 0, 0, 0, 0)
}
}
}
names(fits) = c("subject", "logL", "n", "a", "b", "s")
return(fits)
}
# Fit slope data
trialcuts = c(0, 25, 75, 125, 175, 225, 275, 325, 375, 425, 475, 525, 575, 1000) # TODO clarify what's happening here
dat$block = cut(dat$trial, trialcuts, labels = 0:(length(trialcuts) - 2), include.lowest = T)
dat$mod = (dat$trial - 26) %% 11 + 1
dat$mod[dat$block == 0] = 0
dat$mod[dat$block == (length(trialcuts) - 2)] = (length(trialcuts) - 2)
fitsBlock = list()
fitsMod = list() # NB: we only use fitsMod for final plot
# NB: this takes several minutes
for (i in 1:length(MODALITIES)) {
fitsBlock[[MODALITIES[i]]] = list() # create list of best fitting slopes for trials from each modality
for (k in 0:(length(trialcuts) - 2)) { # TODO why the -2?
# fit slopes by block
A = (dat$vary == MODALITIES[i]) & (dat$block == k)
tmp = subset(dat, A)
fitsBlock[[MODALITIES[i]]][[k + 1]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
# fit slopes by modular split
A = (dat$vary == MODALITIES[i]) & (dat$mod == k)
tmp = subset(dat, A)
fitsMod[[MODALITIES[i]]][[k + 1]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
# sanity check
print(c(i, k, sum(fitsMod[[MODALITIES[i]]][[k + 1]]$logL == -9999),
sum(fitsBlock[[MODALITIES[i]]][[k + 1]]$logL == -9999)))
}
}
# fit power function
brutefit = function(tmp){
nLL = function(a, b, s){
-loglik(tmp$num_dots, tmp$answer, map.bipower, a, b, 10^s) + # NB: can use other function instead of `map.bipower`
PRIORS[[1]](a) +
PRIORS[[2]](b) +
PRIORS[[3]](s)
}
iter = 0
fits = NULL
fit = NULL
while (is.null(fits)){
try(fit <- summary(mle(nLL,
start = list(a = runif(1, PARAMS["ma"], PARAMS["sa"]),
b = runif(1, PARAMS["mb"], PARAMS["sb"]),
s = rnorm(1, PARAMS["ms"], PARAMS["ss"])))), TRUE)
iter = iter + 1
if (!is.null(fit)) {
fits = c(tmp$subject[1], -0.5 * fit@m2logL, length(tmp$num_dots), fit@coef[,"Estimate"])
} else {
# if (iter > 50) { # NB increase this for larger data than individual participants/blocks
if (iter > 500) {
#print("Unable to fit slope")
fits = c(tmp$subject[1], -9999, 0, 0, 0, 0)
}
}
}
names(fits) = c("subject", "logL", "n", "a", "b", "s")
return(fits)
}
# Fit slope data
trialcuts = c(0, 25, 75, 125, 175, 225, 275, 325, 375, 425, 475, 525, 575, 1000) # TODO clarify what's happening here
dat$block = cut(dat$trial, trialcuts, labels = 0:(length(trialcuts) - 2), include.lowest = T)
dat$mod = (dat$trial - 26) %% 11 + 1
dat$mod[dat$block == 0] = 0
dat$mod[dat$block == (length(trialcuts) - 2)] = (length(trialcuts) - 2)
fitsBlock = list()
fitsMod = list() # NB: we only use fitsMod for final plot
# NB: this takes several minutes
for (i in 1:length(MODALITIES)) {
fitsBlock[[MODALITIES[i]]] = list() # create list of best fitting slopes for trials from each modality
for (k in 0:(length(trialcuts) - 2)) { # TODO why the -2?
# fit slopes by block
A = (dat$vary == MODALITIES[i]) & (dat$block == k)
tmp = subset(dat, A)
fitsBlock[[MODALITIES[i]]][[k + 1]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
# fit slopes by modular split
A = (dat$vary == MODALITIES[i]) & (dat$mod == k)
tmp = subset(dat, A)
fitsMod[[MODALITIES[i]]][[k + 1]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
# sanity check
print(c(i, k, sum(fitsMod[[MODALITIES[i]]][[k + 1]]$logL == -9999),
sum(fitsBlock[[MODALITIES[i]]][[k + 1]]$logL == -9999)))
}
}
setwd("/Users/erikbrockbank/web/vullab/numberline/numexpt/R/")
rm(list=ls())
# Fetch relevant model and participant data from noisy_perception model
source('erikb.analysis.noisy_perception.R')
BLOCKSIZE = 30 # number of trials per block
# Initialize priors
PRIORS = list()
PRIORS[[1]] = function(x) {-dnorm(x, 1.14, 0.1, log = T)} # TODO are these set arbitrarily?
PRIORS[[2]] = function(x) {-dnorm(x, -0.1, 0.25, log = T)}
PRIORS[[3]] = function(x) {-dnorm(x, -1, 0.05, log = T)}
# Initialize params (mean a, var a, mean b, var b, mean s, var s)
PARAMS = c(0.7, 1.5, -0.5, 0.2, -0.7, 0.2) # TODO are these set arbitrarily?
names(PARAMS) = c("ma", "sa", "mb", "sb", "ms", "ss")
SUBJ_DATA = data # use processed participant data from erikb.analysis.noisy_perception.R
MODEL_DATA = data %>%
select(subject, trial, num_dots, model.answer) %>%
mutate(answer = model.answer) # align column names to match participant data
glimpse(SUBJ_DATA)
glimpse(MODEL_DATA)
# bi-linear power-law mapping
map.bipower = function(x, a, b) {
crit = a
slope = 10 ^ b
lx = log10(x)
ly = ((lx > crit) * (crit + (lx - crit) * slope) + (lx <= crit) * lx);
return(10 ^ ly)
}
# general log likelihood function (with robustness)
loglik = function(x, y, map.fx, a, b, s) {
sum(
pmax(-6, dnorm(log10(y) - log10(map.fx(x, a, b)), 0, s, log = T))
)
}
# Compute best fitting params for estimate data
brutefit = function(tmp) {
nLL = function(a, b, s) {
-loglik(tmp$num_dots, tmp$answer, map.bipower, a, b, 10 ^ s) + PRIORS[[1]](a) + PRIORS[[2]](b) + PRIORS[[3]](s)
}
iter = 0
fits = NULL
fit = NULL
while (is.null(fits)) {
try(fit <- summary(mle(nLL, # NB: this needs to be assigned with `<-` for some reason
start = list(a = runif(1, PARAMS["ma"], PARAMS["sa"]),
b = runif(1, PARAMS["mb"], PARAMS["sb"]),
s = rnorm(1, PARAMS["ms"], PARAMS["ss"])))), TRUE)
iter = iter + 1
if (!is.null(fit)) {
fits = c(tmp$subject[1], -0.5 * fit@m2logL, length(tmp$num_dots), fit@coef[,"Estimate"])
} else {
if (iter > 50) {
fits = c(tmp$subject[1], -9999, 0, 0, 0, 0)
}
}
}
names(fits) = c("subject", "logL", "n", "a", "b", "s")
return(fits)
}
# Util function used when fitting slopes: splits trial data into blocks
splitBlock = function(trial, n, total.trials) {
floor((trial - 1) / (total.trials / n))
}
# Util function used when calculating correlation matrix
namedSlopes = function(x) {
z = data.frame(x$b)
rownames(z) = x$subject
return(z)
}
# Util function used when calculating correlation matrix
cbind.fill = function(...) {
nm = list(...)
rnames = unique(unlist(lapply(nm, rownames)))
nm = lapply(nm, function(x) {
newrows = rnames[!rnames %in% rownames(x)]
newentries = matrix(nrow = length(newrows), ncol = ncol(x))
rownames(newentries) = newrows
colnames(newentries) = colnames(x)
x = rbind(x, newentries)
return(x)
})
nm = lapply(nm, function(x) {
y = data.frame(x[order(as.numeric(rownames(x))),])
rownames(y) = as.character(sort(as.numeric(rownames(x))))
colnames(y) = colnames(x)
return(y)
})
return(do.call(cbind, nm))
}
# Compute best fitting slopes for each participant x trial block of size `blocksizes` in `data`
fit.slopes = function(blocksizes, data) {
n = blocksizes[1]
fitsBlock = list()
for (k in 1:n) {
tmp = subset(data, splitBlock(data$trial, n, TRIALS) == (k - 1))
fitsBlock[[k]] = data.frame(do.call(rbind, by(tmp, tmp$subject, brutefit)))
}
return(fitsBlock)
}
# Get m blocks by m blocks matrix of fitted slope correlations between each block
get.cor.matrix = function(slopes) {
# Calculate slope correlations
block.slopes = do.call(cbind.fill, lapply(slopes, namedSlopes)) # m subjects by n blocks slope values
cor.matrix = cor(block.slopes, block.slopes, use = "pairwise.complete.obs") # n blocks by n blocks slope correlation matrix
rownames(cor.matrix) = c() # NB: clearing out rownames and colnames is necessary for the processing below
colnames(cor.matrix) = c()
return(cor.matrix)
}
# Convert m blocks by m blocks matrix of fitted slope correlations to data frame
# Has column for each block and correlation between those blocks
# Initially has m^2 rows for each pair of blocks, then prunes out lower half
get.cor.df = function(cor.matrix) {
slope.cor.df = reshape::melt(cor.matrix) # data frame with columns for block x, block y, and slope correlation b/n those blocks, n blocks x n blocks rows
names(slope.cor.df) = c("block1", "block2", "slope.corr")
slope.cor.df = slope.cor.df[slope.cor.df$block1 <= slope.cor.df$block2,] # remove redundant lower half of matrix
slope.cor.df$slope.corr[slope.cor.df$block1 == slope.cor.df$block2] = NA # set correlation to NA in identical blocks
return(slope.cor.df)
}
# Format data frame of correlations by block pair to show mean, se of correlations by block distance across blocks
get.distance.cors = function(cor.df) {
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
filter(trial.dist > 0)
return(dist.df)
}
individ_plot_theme = theme(
# titles
plot.title = element_text(face = "bold", size = 28),
axis.title.y = element_text(face = "bold", size = 24),
axis.title.x = element_text(face = "bold", size = 24),
legend.title = element_text(face = "bold", size = 16),
# axis text
axis.text.y = element_text(size = 14),
axis.text.x = element_text(size = 14, angle = 90, hjust = 0, vjust = 0),
# legend text
legend.text = element_text(size = 14),
# facet text
strip.text = element_text(face = "bold", size = 20),
# backgrounds, lines
panel.background = element_blank(),
#strip.background = element_blank(),
panel.grid = element_line(color = "gray"),
axis.line = element_line(color = "black"),
# positioning
legend.position = "bottom"
)
### Subject Data ###
# Fit slopes, NB: this can take ~10s
fitsBlock.subj = fit.slopes(c(BLOCKSIZE), SUBJ_DATA)
# Get matrix of fitted slope correlations
cor.matrix.subj = get.cor.matrix(fitsBlock.subj)
# Format correlation matrix as data frame to plot slope correlations by trial block in analysis section below
slope.cor.df.subj = get.cor.df(cor.matrix.subj)
# Process slope correlations by trial distance to get mean, se across participants
cor.means.df.blocks.subj = get.distance.cors(slope.cor.df.subj)
fitsBlock.subj
cor.matrix.subj
slope.cor.df.subj
cor.df
dist.df
# Process slope correlations by trial distance to get mean, se across participants
cor.means.df.blocks.subj = get.distance.cors(slope.cor.df.subj)
# Format data frame of correlations by block pair to show mean, se of correlations by block distance across blocks
get.distance.cors = function(cor.df) {
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
ungroup() %>%
filter(trial.dist > 0)
return(dist.df)
}
# Format correlation matrix as data frame to plot slope correlations by trial block in analysis section below
slope.cor.df.model = get.cor.df(cor.matrix.model)
# Get matrix of fitted slope correlations
cor.matrix.model = get.cor.matrix(fitsBlock.model)
# Get matrix of fitted slope correlations
cor.matrix.subj = get.cor.matrix(fitsBlock.subj)
# Format correlation matrix as data frame to plot slope correlations by trial block in analysis section below
slope.cor.df.subj = get.cor.df(cor.matrix.subj)
# Process slope correlations by trial distance to get mean, se across participants
cor.means.df.blocks.subj = get.distance.cors(slope.cor.df.subj)
cor.df
cor.df = slope.cor.df.subj
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist)
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr)))
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
#ungroup() %>%
filter(trial.dist > 0)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
ungroup() %>%
filter(trial.dist > 0)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr)))
glimpse(dist.df)
glimpse(cor.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist)
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr)))
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
ungroup()
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
group_by(trial.dist)
glimpse(dist.df)
mean(dist.df$slope.corr)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr)))
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
ungroup()
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist)
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(as.factor(trial.dist)) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr)))
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(as.factor(trial.dist)) %>%
summarize(mean.cor = mean(slope.corr),
se.cor = sd(slope.corr) / sqrt(length(slope.corr))) %>%
ungroup()
glimpse(dist.df)
length(cor.df$slope.corr)
length(cor.df$slope.corr, na.rm = TRUE)
sd(cor.df$slope.corr)
sd(cor.df$slope.corr, na.rm = TRUE)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr)))
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup()
dist.df
glimpse(cor.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
mutate(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup()
glimpse(dist.df)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
mutate(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup() %>%
select(unique(trial.dist), mean.cor, se.cor)
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
mutate(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup()
dist.df
trial.dist
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
mutate(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup() %>%
select(trial.dist, mean.cor, se.cor)
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
#filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr)))
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist) %>%
#filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr))) %>%
ungroup()
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist)
dist.df
dist.df = dist.df %>%
#filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE),
se.cor = sd(slope.corr, na.rm = TRUE) / sqrt(length(slope.corr)))
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist)
dist.df = dist.df %>%
#filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE))
dist.df
dist.df = cor.df %>%
mutate(block.dist = block2 - block1,
trial.dist = 10 * block.dist)
dist.df = dist.df %>%
#filter(trial.dist > 0) %>%
group_by(trial.dist) %>%
summarize(mean.cor = mean(slope.corr, na.rm = TRUE)) %>% ungroup()
dist.df
install.packages("tibble")
